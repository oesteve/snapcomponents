/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AdminRouteRouteImport } from './routes/admin/route'
import { Route as AdminIndexRouteImport } from './routes/admin/index'
import { Route as AdminArticlesRouteImport } from './routes/admin/articles'
import { Route as AdminAboutRouteImport } from './routes/admin/about'
import { Route as AdminAgentsIndexRouteImport } from './routes/admin/agents/index'
import { Route as AdminAgentsAgentIdSettingsRouteImport } from './routes/admin/agents/$agentId/settings'
import { Route as AdminAgentsAgentIdInstallRouteImport } from './routes/admin/agents/$agentId/install'
import { Route as AdminAgentsAgentIdChatRouteImport } from './routes/admin/agents/$agentId/chat'

const AdminRouteRoute = AdminRouteRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminIndexRoute = AdminIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminRouteRoute,
} as any)
const AdminArticlesRoute = AdminArticlesRouteImport.update({
  id: '/articles',
  path: '/articles',
  getParentRoute: () => AdminRouteRoute,
} as any)
const AdminAboutRoute = AdminAboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => AdminRouteRoute,
} as any)
const AdminAgentsIndexRoute = AdminAgentsIndexRouteImport.update({
  id: '/agents/',
  path: '/agents/',
  getParentRoute: () => AdminRouteRoute,
} as any)
const AdminAgentsAgentIdSettingsRoute =
  AdminAgentsAgentIdSettingsRouteImport.update({
    id: '/agents/$agentId/settings',
    path: '/agents/$agentId/settings',
    getParentRoute: () => AdminRouteRoute,
  } as any)
const AdminAgentsAgentIdInstallRoute =
  AdminAgentsAgentIdInstallRouteImport.update({
    id: '/agents/$agentId/install',
    path: '/agents/$agentId/install',
    getParentRoute: () => AdminRouteRoute,
  } as any)
const AdminAgentsAgentIdChatRoute = AdminAgentsAgentIdChatRouteImport.update({
  id: '/agents/$agentId/chat',
  path: '/agents/$agentId/chat',
  getParentRoute: () => AdminRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/admin': typeof AdminRouteRouteWithChildren
  '/admin/about': typeof AdminAboutRoute
  '/admin/articles': typeof AdminArticlesRoute
  '/admin/': typeof AdminIndexRoute
  '/admin/agents': typeof AdminAgentsIndexRoute
  '/admin/agents/$agentId/chat': typeof AdminAgentsAgentIdChatRoute
  '/admin/agents/$agentId/install': typeof AdminAgentsAgentIdInstallRoute
  '/admin/agents/$agentId/settings': typeof AdminAgentsAgentIdSettingsRoute
}
export interface FileRoutesByTo {
  '/admin/about': typeof AdminAboutRoute
  '/admin/articles': typeof AdminArticlesRoute
  '/admin': typeof AdminIndexRoute
  '/admin/agents': typeof AdminAgentsIndexRoute
  '/admin/agents/$agentId/chat': typeof AdminAgentsAgentIdChatRoute
  '/admin/agents/$agentId/install': typeof AdminAgentsAgentIdInstallRoute
  '/admin/agents/$agentId/settings': typeof AdminAgentsAgentIdSettingsRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/admin': typeof AdminRouteRouteWithChildren
  '/admin/about': typeof AdminAboutRoute
  '/admin/articles': typeof AdminArticlesRoute
  '/admin/': typeof AdminIndexRoute
  '/admin/agents/': typeof AdminAgentsIndexRoute
  '/admin/agents/$agentId/chat': typeof AdminAgentsAgentIdChatRoute
  '/admin/agents/$agentId/install': typeof AdminAgentsAgentIdInstallRoute
  '/admin/agents/$agentId/settings': typeof AdminAgentsAgentIdSettingsRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/admin'
    | '/admin/about'
    | '/admin/articles'
    | '/admin/'
    | '/admin/agents'
    | '/admin/agents/$agentId/chat'
    | '/admin/agents/$agentId/install'
    | '/admin/agents/$agentId/settings'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/admin/about'
    | '/admin/articles'
    | '/admin'
    | '/admin/agents'
    | '/admin/agents/$agentId/chat'
    | '/admin/agents/$agentId/install'
    | '/admin/agents/$agentId/settings'
  id:
    | '__root__'
    | '/admin'
    | '/admin/about'
    | '/admin/articles'
    | '/admin/'
    | '/admin/agents/'
    | '/admin/agents/$agentId/chat'
    | '/admin/agents/$agentId/install'
    | '/admin/agents/$agentId/settings'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AdminRouteRoute: typeof AdminRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/': {
      id: '/admin/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof AdminIndexRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/admin/articles': {
      id: '/admin/articles'
      path: '/articles'
      fullPath: '/admin/articles'
      preLoaderRoute: typeof AdminArticlesRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/admin/about': {
      id: '/admin/about'
      path: '/about'
      fullPath: '/admin/about'
      preLoaderRoute: typeof AdminAboutRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/admin/agents/': {
      id: '/admin/agents/'
      path: '/agents'
      fullPath: '/admin/agents'
      preLoaderRoute: typeof AdminAgentsIndexRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/admin/agents/$agentId/settings': {
      id: '/admin/agents/$agentId/settings'
      path: '/agents/$agentId/settings'
      fullPath: '/admin/agents/$agentId/settings'
      preLoaderRoute: typeof AdminAgentsAgentIdSettingsRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/admin/agents/$agentId/install': {
      id: '/admin/agents/$agentId/install'
      path: '/agents/$agentId/install'
      fullPath: '/admin/agents/$agentId/install'
      preLoaderRoute: typeof AdminAgentsAgentIdInstallRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/admin/agents/$agentId/chat': {
      id: '/admin/agents/$agentId/chat'
      path: '/agents/$agentId/chat'
      fullPath: '/admin/agents/$agentId/chat'
      preLoaderRoute: typeof AdminAgentsAgentIdChatRouteImport
      parentRoute: typeof AdminRouteRoute
    }
  }
}

interface AdminRouteRouteChildren {
  AdminAboutRoute: typeof AdminAboutRoute
  AdminArticlesRoute: typeof AdminArticlesRoute
  AdminIndexRoute: typeof AdminIndexRoute
  AdminAgentsIndexRoute: typeof AdminAgentsIndexRoute
  AdminAgentsAgentIdChatRoute: typeof AdminAgentsAgentIdChatRoute
  AdminAgentsAgentIdInstallRoute: typeof AdminAgentsAgentIdInstallRoute
  AdminAgentsAgentIdSettingsRoute: typeof AdminAgentsAgentIdSettingsRoute
}

const AdminRouteRouteChildren: AdminRouteRouteChildren = {
  AdminAboutRoute: AdminAboutRoute,
  AdminArticlesRoute: AdminArticlesRoute,
  AdminIndexRoute: AdminIndexRoute,
  AdminAgentsIndexRoute: AdminAgentsIndexRoute,
  AdminAgentsAgentIdChatRoute: AdminAgentsAgentIdChatRoute,
  AdminAgentsAgentIdInstallRoute: AdminAgentsAgentIdInstallRoute,
  AdminAgentsAgentIdSettingsRoute: AdminAgentsAgentIdSettingsRoute,
}

const AdminRouteRouteWithChildren = AdminRouteRoute._addFileChildren(
  AdminRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  AdminRouteRoute: AdminRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
